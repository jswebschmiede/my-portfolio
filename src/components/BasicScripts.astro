---
import { SITE } from '@/config';
---

<script>
    //@ts-nocheck
    import VanillaTilt from 'vanilla-tilt';
    import ScrollReveal from 'scrollreveal';
    import Swup from 'swup';
    import SwupA11yPlugin from '@swup/a11y-plugin';
    import SwupBodyClassPlugin from '@swup/body-class-plugin';
    import SwupHeadPlugin from '@swup/head-plugin';
    import SwupOverlayTheme from '@swup/overlay-theme';
    import { followCursor } from '../lib/mouse-cursor.ts';
    import '../lib/scrollfx.js';

    const swup = new Swup({
        plugins: [
            new SwupBodyClassPlugin(),
            new SwupA11yPlugin(),
            new SwupHeadPlugin(),
            new SwupOverlayTheme({
                color: '#FC7942',
                duration: 800,
                direction: 'to-right'
            })
        ]
    });

    const init = () => {
        // init tilt
        if (document.querySelector('.tilt')) {
            VanillaTilt.init(Array.from(document.querySelectorAll('.tilt')), {
                max: 5,
                speed: 400,
                perspective: 500
            });
        }

        // init mouse cursor
        followCursor();

        var scrollFx = document.getElementsByClassName('js-scroll-fx');
        for (var i = 0; i < scrollFx.length; i++) {
            (function (i) {
                var scrollableElement = scrollFx[i].getAttribute(
                    'data-scrollable-element'
                );
                new ScrollFx(scrollFx[i], scrollableElement);
            })(i);
        }

        // init scroll reveal
        ScrollReveal().reveal('.reveal-fx', {
            delay: 500,
            duration: 400,
            easing: 'ease-in-out',
            distance: '50px'
        });

        const mainNav = document.getElementById('main-nav');
        const navLinks = Array.from(mainNav.querySelectorAll('a'));

        // set aria-current and active nav link
        navLinks.forEach((link) => {
            const href = link.getAttribute('href');
            const path = window.location.pathname;
            const span = link.children[0];

            if (href === path) {
                link.setAttribute('aria-current', 'page');
                span.classList.add(['w-5'], ['bg-black-800']);
            } else {
                link.removeAttribute('aria-current');
                span.classList.remove(['w-5'], ['bg-black-800']);
                span.classList.add(['w-0'], ['bg-black-200']);
            }
        });
    };

    const unload = () => {
        // unload tilt
        document.querySelectorAll('.tilt').forEach((el) => {
            el.vanillaTilt.destroy();
        });
        // unload scroll reveal
        ScrollReveal().clean('.reveal-fx');
    };

    // run once when page loads
    if (document.readyState === 'complete') {
        init();
    } else {
        document.addEventListener('DOMContentLoaded', () => init());
    }

    // run after every additional navigation by swup
    swup.on('contentReplaced', init);

    // cleanup all the instances, listeners and mess we have made when page was loaded
    swup.on('willReplaceContent', unload);
</script>

<script is:inline define:vars={{ defaultTheme: SITE.defaultTheme }}>
    // Add class to html tag if JavaScript is enabled
    document.documentElement.classList.add('js');

    // Toggle dark mode icon
    function toggleDarkmodeIcon() {
        const moon = document.getElementById('moon');
        const sunny = document.getElementById('sunny');
        const isDarkMode = document.documentElement.classList.contains('dark');

        sunny.classList.toggle('hidden', isDarkMode);
        moon.classList.toggle('hidden', !isDarkMode);
    }

    // Add class to html tag if dark theme is enabled
    function applyTheme(theme) {
        document.documentElement.classList.toggle('dark', theme === 'dark');
        toggleDarkmodeIcon();
    }

    // Attach event to element
    function attachEvent(selector, event, fn) {
        const matches =
            typeof selector === 'string'
                ? document.querySelectorAll(selector)
                : selector;
        if (matches && matches.length) {
            matches.forEach((elem) => {
                elem.addEventListener(event, (e) => fn(e, elem), false);
            });
        }
    }

    // Apply theme
    if (
        (defaultTheme && defaultTheme.endsWith(':only')) ||
        (!localStorage.theme && defaultTheme !== 'system')
    ) {
        applyTheme(defaultTheme.replace(':only', ''));
    } else if (
        localStorage.theme === 'dark' ||
        (!('theme' in localStorage) &&
            window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
        applyTheme('dark');
    } else {
        applyTheme('light');
    }

    // on load
    window.onload = function () {
        // Toggle dark mode
        attachEvent('[data-toggle-color-scheme]', 'click', function () {
            if (defaultTheme.endsWith(':only')) {
                return;
            }

            document.documentElement.classList.toggle('dark');
            localStorage.theme = document.documentElement.classList.contains(
                'dark'
            )
                ? 'dark'
                : 'light';
            toggleDarkmodeIcon();
        });
    };
</script>
